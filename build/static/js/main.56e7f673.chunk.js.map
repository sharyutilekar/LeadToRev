{"version":3,"sources":["components/CountrySelector.js","components/StatCard.js","components/LineChartComponent.js","components/PieChartComponent.js","App.js","index.js"],"names":["CountrySelector","_ref","countries","selected","onChange","React","createElement","className","value","e","target","map","country","key","code","name","StatCard","title","color","concat","LineChartComponent","data","timeline","chartData","Object","keys","cases","label","date","deaths","recovered","ResponsiveContainer","width","height","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Line","type","stroke","strokeWidth","PieChartComponent","total","pop","COLORS","PieChart","Pie","nameKey","cx","cy","outerRadius","fill","entry","index","Cell","length","App","setCountries","useState","selectedCountry","setSelectedCountry","covidData","setCovidData","error","setError","useEffect","axios","get","then","res","formatted","c","common","cca2","toLowerCase","sort","a","b","localeCompare","catch","err","Fragment","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.56e7f673.chunk.js","sourcesContent":["// components/CountrySelector.js\r\nimport React from 'react';\r\nimport '../style/CountrySelector.css';\r\n\r\n\r\nconst CountrySelector = ({ countries, selected, onChange }) => {\r\n  return (\r\n    <select className=\"country-select\" value={selected} onChange={(e) => onChange(e.target.value)}>\r\n      {countries.map((country) => (\r\n        <option key={country.code} value={country.code}>{country.name}</option>\r\n      ))}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default CountrySelector;\r\n","// components/StatCard.js\r\nimport React from 'react';\r\nimport '../style/StatCard.css';\r\n\r\nconst StatCard = ({ title, value, color }) => {\r\n  return (\r\n    <div className={`stat-card ${color}`}>\r\n      <h3>{title}</h3>\r\n      <p>{value}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatCard;\r\n","// components/LineChartComponent.js\r\nimport React from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from 'recharts';\r\nimport '../style/LineChartComponent.css';\r\n\r\nconst LineChartComponent = ({ data }) => {\r\n  const timeline = data.timeline;\r\n  const labels = Object.keys(timeline.cases);\r\n  const chartData = labels.map((label) => ({\r\n    date: label,\r\n    cases: timeline.cases[label],\r\n    deaths: timeline.deaths[label],\r\n    recovered: timeline.recovered[label],\r\n  }));\r\n\r\n  return (\r\n    <div className=\"line-chart\">\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <LineChart data={chartData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"date\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Line type=\"monotone\" dataKey=\"cases\" stroke=\"#8884d8\" strokeWidth={2} />\r\n          <Line type=\"monotone\" dataKey=\"recovered\" stroke=\"#82ca9d\" strokeWidth={2} />\r\n          <Line type=\"monotone\" dataKey=\"deaths\" stroke=\"#ff4d4f\" strokeWidth={2} />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineChartComponent;\r\n","// components/PieChartComponent.js\r\nimport React from 'react';\r\nimport { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from 'recharts';\r\nimport '../style/PieChartComponent.css';\r\n\r\nconst PieChartComponent = ({ data }) => {\r\n  const total = data.timeline.cases[Object.keys(data.timeline.cases).pop()];\r\n  const deaths = data.timeline.deaths[Object.keys(data.timeline.deaths).pop()];\r\n  const recovered = data.timeline.recovered[Object.keys(data.timeline.recovered).pop()];\r\n  const active = total - deaths - recovered;\r\n\r\n  const chartData = [\r\n    { name: 'Recovered', value: recovered },\r\n    { name: 'Deaths', value: deaths },\r\n    { name: 'Active', value: active },\r\n    { name: 'Total Population', value: 1400000000 }, // hardcoded for illustration\r\n  ];\r\n\r\n  const COLORS = ['#82ca9d', '#ff4d4f', '#8884d8', '#f0e68c'];\r\n\r\n  return (\r\n    <div className=\"pie-chart\">\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <PieChart>\r\n          <Pie\r\n            data={chartData}\r\n            dataKey=\"value\"\r\n            nameKey=\"name\"\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            outerRadius={100}\r\n            fill=\"#8884d8\"\r\n            label\r\n          >\r\n            {chartData.map((entry, index) => (\r\n              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n            ))}\r\n          </Pie>\r\n          <Tooltip />\r\n        </PieChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PieChartComponent;\r\n","// App.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport CountrySelector from './components/CountrySelector';\r\nimport StatCard from './components/StatCard';\r\nimport LineChartComponent from './components/LineChartComponent';\r\nimport PieChartComponent from './components/PieChartComponent';\r\nimport './style/App.css';\r\n\r\nconst App = () => {\r\n  const [countries, setCountries] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState('USA');\r\n  const [covidData, setCovidData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    axios.get('https://restcountries.com/v3.1/all')\r\n      .then(res => {\r\n        const formatted = res.data.map(c => ({\r\n          name: c.name.common,\r\n          code: c.cca2.toLowerCase(),\r\n        })).sort((a, b) => a.name.localeCompare(b.name));\r\n        setCountries(formatted);\r\n      })\r\n      .catch(err => setError('Failed to fetch country list.'));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    axios.get(`https://disease.sh/v3/covid-19/historical/${selectedCountry}?lastdays=1500`)\r\n      .then(res => setCovidData(res.data))\r\n      .catch(err => setError('Failed to fetch COVID data.'));\r\n  }, [selectedCountry]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>COVID-19 and Population Dashboard</h1>\r\n      <div className=\"controls\">\r\n        <CountrySelector \r\n          countries={countries} \r\n          selected={selectedCountry} \r\n          onChange={setSelectedCountry} \r\n        />\r\n        {/* Add date filter UI here if implementing */}\r\n      </div>\r\n      {error && <p className=\"error\">{error}</p>}\r\n      {covidData && (\r\n        <>\r\n          <div className=\"stats\">\r\n            <StatCard title=\"Total Cases\" value=\"5M\" color=\"blue\" />\r\n            <StatCard title=\"Recoveries\" value=\"4.2M\" color=\"green\" />\r\n            <StatCard title=\"Deaths\" value=\"0.2M\" color=\"red\" />\r\n          </div>\r\n          <div className=\"charts\">\r\n            <LineChartComponent data={covidData} />\r\n            <PieChartComponent data={covidData} />\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App';\r\nimport './style/App.css'; // If you're using App styles\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(<App />);\r\n"],"sourceRoot":""}